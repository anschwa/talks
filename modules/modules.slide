Using Modules Replace
Golang Indianapolis _ _, 2019

Adam Schwartz
Software Engineer, Diagnotes
adam@anschwa.com

* The Trouble with Modules
* How do I develop my Go applications locally?

- Should I use `GOPATH`?
- When do I set `GO111MODULE`?
- How can I work off `master` but still version my app?
- How do I switch between developing a feature and debugging a release?
- How do I manage internal app dependencies?
- What are the best practices?

* Using Replace
* Scenario
You have two services: `authorizer` and `website`, both are using `modules`.

In production you have `website@v1.13.0`, which imports
`authorizer@v1.2.0`.

Locally, you are developing a feature for `authorizer` and want to
test it out on `website`. How do you do it?

* The Replace Directive
`replace` allows us to substitute a given dependency for a different
version, fork, or location of the package.

  $ cd /path/to/website
  $ go mod edit -replace=example.com/services/authorizer=/path/to/local/copy/of/authorizer
.code src/web-go-mod.txt

* Verifying module versions
  $ go list -m all
.code src/web-list-all.txt

* Getting back
  $ go mod edit -dropreplace=example.com/services/authorizer
.code src/web-go-mod.txt /^module/,/^\)/

* Other Module Tricks
Grab latest commit regardless of tagged versions:

  $ go get example.com/services/authorizer@develop

Ignore a dependency completely (always use latest commit on `master`):

  $ go mod edit -exclude=example.com/services/authorizer

Update all dependencies:

  $ go get -u ./...
  $ go mod tidy
